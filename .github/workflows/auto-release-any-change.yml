name: Auto Release on Any Change

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect package manager
        id: pm
        run: |
          if [ -f pnpm-lock.yaml ]; then
            echo "name=pnpm" >> $GITHUB_OUTPUT
            echo "install=pnpm install --frozen-lockfile" >> $GITHUB_OUTPUT
          elif [ -f yarn.lock ]; then
            echo "name=yarn" >> $GITHUB_OUTPUT
            echo "install=yarn --frozen-lockfile" >> $GITHUB_OUTPUT
          else
            echo "name=npm" >> $GITHUB_OUTPUT
            echo "install=npm ci" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: ${{ steps.pm.outputs.name }}

      - name: Install dependencies
        run: ${{ steps.pm.outputs.install }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        id: version
        run: |
          # Get current package.json version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Check if this is the first release (version 0.1.0 or similar)
          if [ "$MAJOR" = "0" ] && [ "$MINOR" = "1" ] && [ "$PATCH" = "0" ]; then
            # Start from 1.1
            NEW_VERSION="1.1"
            echo "First release detected. Starting from version 1.1"
          else
            # Calculate new version by adding 0.1 to current version
            # Convert to number, add 0.1, format back to version
            CURRENT_NUM=$(echo "$CURRENT_VERSION" | awk '{printf "%.1f", $1}')
            NEW_NUM=$(echo "$CURRENT_NUM + 0.1" | bc)
            NEW_VERSION=$(printf "%.1f" $NEW_NUM)
            echo "Current version: $CURRENT_VERSION, New version: $NEW_VERSION"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          echo "Updating version to $NEW_VERSION"

          # Update version in package.json
          node -e "
          const fs = require('fs');
          const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
          pkg.version = '$NEW_VERSION';
          fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

          # Commit the version change
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION" || echo "No changes to commit"

      - name: Build project
        run: |
          echo "Building project..."
          if [ '${{ steps.pm.outputs.name }}' = 'pnpm' ]; then
            pnpm build
          elif [ '${{ steps.pm.outputs.name }}' = 'yarn' ]; then
            yarn build
          else
            npm run build
          fi
          echo "âœ… Build successful"

      - name: Create Release
        id: create-release
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          COMMIT_SHA="${{ github.sha }}"

          echo "Creating release v$NEW_VERSION for commit $COMMIT_SHA"

          # Get commit messages since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log $LAST_TAG..HEAD --oneline --no-merges)
          else
            COMMITS=$(git log --oneline --no-merges -10)
          fi

          # Create release notes
          RELEASE_NOTES="## ðŸš€ Release v$NEW_VERSION

          ### Changes:
          $COMMITS

          ### Version Update:
          - Version bumped from ${{ steps.version.outputs.current_version }} to $NEW_VERSION
          - Auto-generated release for all changes
          "

          # Create the release
          gh release create "v$NEW_VERSION" \
            --title "Release v$NEW_VERSION" \
            --notes "$RELEASE_NOTES" \
            --generate-notes \
            || echo "Release creation failed, but continuing..."

      - name: Push version changes
        run: |
          echo "Pushing version changes to repository"
          git push origin HEAD:${{ github.ref_name }} || echo "No changes to push"

      - name: Create Release Summary
        run: |
          echo "## ðŸŽ‰ Auto Release Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Version | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| ${{ steps.version.outputs.new_version }} | âœ… Created |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Previous version:** ${{ steps.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Auto-release triggered for any repository changes! ðŸš€" >> $GITHUB_STEP_SUMMARY